#Embedding a digital signature in images to
#prove ownership in case of piracy

import cv2
SIGNATURE_LENGTH = 100

#104---> [‭011,010,00‬]
def getBits(n):
	return [n >> 5, (n & 28)>>2, n & 3]

#[‭011,010,00‬] ---> 104
def getByte(bits):
	return (((bits[0]<<3) | bits[1])<<2) | bits[2]

def normalize_signature(x):
	return  x[:SIGNATURE_LENGTH].ljust(SIGNATURE_LENGTH,'*')

def getEmbeddingPoints():
	#ls = []
	#for x in range(SIGNATURE_LENGTH):
	#	ls.append((20, x*2))
	#return ls
	return [(8, x*2) for x in range(SIGNATURE_LENGTH) ]

def embed(resultImage, srcImage, sign):
	image = cv2.imread(srcImage, cv2.IMREAD_COLOR)
	if image is None:
		print(srcImage, 'not found')
		return

	normalized = normalize_signature(sign)
	embedAt = getEmbeddingPoints()

	cnt = 0
	for x, y in embedAt:
		data = ord(normalized[cnt]) #ord gives the ASCII of the character
		bits = getBits(data)
		image[x][y][2] = (image[x][y][2] & ~7) | bits[0] #red band
		image[x][y][1] = (image[x][y][1] & ~7) | bits[1]#green band
		image[x][y][0] = (image[x][y][0] & ~3) | bits[2]#blue band
		cnt+=1

	#save back
	cv2.imwrite(resultImage, image)

def extract(resultImage):
	image = cv2.imread(resultImage, cv2.IMREAD_COLOR)
	if image is None:
		print(resultImage, 'not found')
		return

	extractFrom = getEmbeddingPoints()

	cnt = 0
	sign = ''
	for x, y in extractFrom:
		bit1 = (image[x][y][2] & 7) #red band
		bit2 = (image[x][y][1] & 7)#green band
		bit3 = (image[x][y][0] & 3)#blue band
		data = getByte([bit1,bit2,bit3])
		sign = sign+ chr(data) #chr converts ASCII to text
		cnt+=1
	#remove the padding
	return sign.strip('*')


embed('d:/images/result.png', 'd:/images/work.jpg','This image belongs to AIT.FE')
signature = extract('d:/images/result.png')
print(signature)
